import enum
from typing import List, Union, Sequence, Callable


ParamNameFnType = Union[Sequence[str], Callable[[int], str]]


class SpecialFunction(enum.Enum):
    Identity = 0
    Threshold = 1
    Truncate = 2
    Remainder = 3


class LinearExpression:
    def evaluate(self, params: List[float]) -> float: ...
    def set(self, indices: List[float], coefficients: List[float], bias: float) -> None: ...
    def to_str(self, param_name_fn: ParamNameFnType = None, strip_leading_plus = True) -> str: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class TreeExpression:
    def evaluate(self, params: List[float]) -> float: ...
    def add_child(self, expr: TreeExpression) -> None: ...
    def add_poly_member(
        self, coefficient: float, child_indices: List[int], powers: List[float]
    ) -> None: ...
    def set_special_function(self, function_type: SpecialFunction) -> None: ...
    def set_linear(self, indices: List[float], coefficients: List[float], bias: float) -> None: ...
    def to_str(self, param_name_fn: ParamNameFnType = None, strip_leading_plus = True) -> str: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


class Graph:
    def add_expr(self, expr: TreeExpression) -> None: ...
    def evaluate(self, args: List[float]) -> List[float]: ...
    def to_str(
        self, n_args: int, param_name_fn: ParamNameFnType = None, strip_leading_plus = True
    ) -> str: ...
